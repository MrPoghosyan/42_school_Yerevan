!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Libft/Makefile	/^AR		= ar$/;"	m
ARFLAGS	Libft/Makefile	/^ARFLAGS	= -rcs$/;"	m
BOBJ	Libft/Makefile	/^BOBJ	= $(BSRC:.c=.o)$/;"	m
BSRC	Libft/Makefile	/^BSRC = ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c \\$/;"	m
CC	Libft/Makefile	/^CC		= cc$/;"	m
CC	Makefile	/^CC		= cc$/;"	m
CFLAGS	Libft/Makefile	/^CFLAGS	= -Wall -Wextra -Werror$/;"	m
CFLAGS	Makefile	/^CFLAGS	= -g -Wall -Wextra -Werror$/;"	m
INCLUDE	Makefile	/^INCLUDE		= -I. -I$(LIBFT_DIR)$/;"	m
LIBFT	Makefile	/^LIBFT		= $(LIBFT_DIR)\/libft.a$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR	= Libft$/;"	m
LIBFT_H	Libft/libft.h	14;"	d
NAME	Libft/Makefile	/^NAME	= libft.a$/;"	m
NAME	Makefile	/^NAME	= pipex$/;"	m
OBJ	Libft/Makefile	/^OBJ		= $(SRC:.c=.o)$/;"	m
OBJ	Makefile	/^OBJ		= $(SRC:.c=.o)$/;"	m
PIPEX_BONUS_H	pipex_bonus.h	2;"	d
PIPEX_H	pipex.h	2;"	d
SRC	Libft/Makefile	/^SRC = ft_isalpha.c ft_isdigit.c ft_isalnum.c ft_isascii.c ft_isprint.c \\$/;"	m
SRC	Makefile	/^SRC		= main.c pipex.c pipex_utils.c utils.c$/;"	m
check_argc	utils.c	/^void	check_argc(int argc)$/;"	f
check_argc_bonus	utils_bonus.c	/^void	check_argc_bonus(int argc, char **argv)$/;"	f
child_process	pipex.c	/^void	child_process(int infile, int fd[2], char *cmd1, char **envp)$/;"	f
content	Libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
count_words	Libft/ft_split.c	/^static int	count_words(char const *s, char sep)$/;"	f	file:
empty_argument	utils.c	/^int	empty_argument(const char *str)$/;"	f
exec_command	pipex_utils.c	/^void	exec_command(char *cmd, char **envp)$/;"	f
fill_tab	Libft/ft_split.c	/^static int	fill_tab(char **tab, char const *s, char sep)$/;"	f	file:
find_path	pipex_utils.c	/^static char	*find_path(char *cmd, char **envp)$/;"	f	file:
free_result	Libft/ft_split.c	/^static void	free_result(char **tab)$/;"	f	file:
free_split	utils.c	/^void	free_split(char **line)$/;"	f
ft_atoi	Libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_bzero	Libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	Libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_isalnum	Libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	Libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	Libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	Libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	Libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_itoa	Libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	Libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	Libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	Libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	Libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	Libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	Libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	Libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	Libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	Libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	Libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	Libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	Libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	Libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	Libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_putchar_fd	Libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	Libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	Libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	Libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_split	Libft/ft_split.c	/^char	**ft_split(char const *s, char sep)$/;"	f
ft_strchr	Libft/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f
ft_strdup	Libft/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_striteri	Libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	Libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin3	utils.c	/^char	*ft_strjoin3(const char *s1, const char *s2, const char *s3)$/;"	f
ft_strlcat	Libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dsize)$/;"	f
ft_strlcpy	Libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dsize)$/;"	f
ft_strlen	Libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	Libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	Libft/ft_strncmp.c	/^int	ft_strncmp(const char *str1, const char *str2, size_t n)$/;"	f
ft_strnstr	Libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	Libft/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f
ft_strtrim	Libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	Libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	Libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	Libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
get_next_word	Libft/ft_split.c	/^static char	*get_next_word(char const **s, char sep)$/;"	f	file:
get_path_line	utils.c	/^char	*get_path_line(char **envp)$/;"	f
main	main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f
main	main_bonus.c	/^int	main(int argc, char **argv, char **envp)$/;"	f
next	Libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
num_len	Libft/ft_itoa.c	/^static size_t	num_len(int n)$/;"	f	file:
parent_process	pipex.c	/^void	parent_process(int outfile, int fd[2], char *cmd2, char **envp)$/;"	f
s_list	Libft/libft.h	/^typedef struct s_list$/;"	s
t_list	Libft/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
write_num	Libft/ft_putnbr_fd.c	/^static void	write_num(int n, int fd)$/;"	f	file:
